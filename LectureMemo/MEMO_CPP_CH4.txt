
4. 객체 포인터와 객체 배열, 객체의 동적 생성

    - 첨부 슬라이드 pointerCopyDelete.ppt (P. 1~20까지)
        
4.1 객체 포인터  

 - 클래스 포인터형은 정수 포인터형의 쓰임새와 다르지 않다.

   정수 포인터의 예제

   int x;
   int* p;

   p = &x;
   *p = 123;
   cout << x;   // 123 출력


   객체 포인터의 예제

   Circle donut;
   Circle* p;

   p = &donut;
   (*p).setRadius( 10 ); // 반지름을 10으로 설정
   p->setRadius( 10 );   // 반지름을 10으로 설정 (위의 문장과 동일한 의미)

   cout << (*p).getArea();   // 면적을 출력
   cout << p->getArea();     // 면적을 출력 (위의 문장과 동일한 의미)


4.2 객체 배열

 - 객체 배열도 정수 배열의 쓰임새와 다르지 않다.
   다만, 객체를 선언하면 이 객체의 생성자를 자동으로 호출한다는 점이 다르다.


   예제4-3

   class Circle {
     int radius;
   public:
     Circle() { 
       radius = 1;
       cout << "Circle() is called." << endl;
     }
     ...
     ~Circle() {
       cout << "~Circle() is called.." << endl;
     }
   };


   Circle circleArray[3];   // cf.int intArray[3];


   위 예제를 실행한 결과는?


   (힌트)

     배열에 포함된 3개의 Circle 객체에 대해 각각 (기본) 생성자를 호출한다.




4.3 동적 메모리 할당 및 반환   4.4 객체와 객체 배열의 동적 생성 및 반환

 - new와 delete 연산자

 - new[]와 delete[] 연산자

 - new와 new[] 연산자로 생성된 정수나 객체가 위치하는 곳은 힙(heap)
   지역 변수로 선언된 정수나 객체가 위치하는 곳은 스택(stack)


4.5 this 포인터

 - Circle a, b;



   Circle::setRadius(int radius) {
     this.radius = radius;
   }


   a.setRadius(10);을 호출할 때 this는 &a이고,

   b.setRadius(20);과 같이 호출할 때 thisms &b이다.


 - 실습문제 2번 포인터형 멤버 변수를 갖는 클래스

 - 실습문제 8번 Family 클래스: 4.1~4.5를 종합한 내용의 예제
   


4.6 string 클래스를 이용한 문자열 사용

  MEMO_CPP_CH2 참고


  - string 클래스 활용 예제

   1) palindrome 프로그램 

   2) 입력 받은 텍스트의 줄(line), 단어(word), 알파벳 수를 세는 프로그램



